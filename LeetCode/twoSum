Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

--------
Example: 
--------
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

--------
answer
--------
// 用了hash map的思想，算法复杂度On
// key 为 nums[i] 对应的加数
// value 为 i 
// 每次去find hash_map，查找效率为O1，找到了就能配对了，i为被加数，对应的value为之前保存的加数

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        map<int, int> hash_map;
        vector<int> result;
        
        for(int i = 0; i < nums.size(); i++)
        {
            int in_map = target - nums[i];
            
            // search the map
            if(hash_map.find(in_map) != hash_map.end())
            {
                result.push_back(hash_map[in_map]);
                result.push_back(i);
                return result;
            }
            hash_map[nums[i]] = i;
        }
        return result;
    }
};
