Given a string, find the length of the longest substring without repeating characters.

-----------
Examples:
-----------

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.


----------
solution one
----------

//  利用了max 函数作比较，程序简洁
// 不过执行效率并不高，耗时38 ms 只击败了 40%的人
// 它的思想是，利用start变量来保存已经遍历过的子串，然后跟着i一起走

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
 
        map<char,int> hash;
        int start = -1;
        int max_len = 0;
        
        for(int i = 0; i < s.length(); i++)
        {
            if(hash.count(s[i]) != 0)
            {
                // 这个max 是为了让start一致保持在最靠近i的位置，因为可能搜索到多个
                start = max(start, hash[s[i]]);
            }
            hash[s[i]] = i;
            max_len = max(max_len, i - start);
            
        }

        return max_len;
    }
};

-----------
solution two
-----------
// 把 for循环里的长度判断提到循环体外，能提升到31ms
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
 
        map<char,int> hash;
        int start = -1;
        int max_len = 0;
        int len = s.length();
        
        for(int i = 0; i < len; i++)
        {
            int c = s[i];
            if(hash.count(c) != 0)
            {
                //start = max(start, hash[s[i]]);
                if(start < hash[c])
                {
                    start = hash[c];
                }
            }
            hash[c] = i;
            if(max_len < i - start)
            {
                max_len = i - start;
            }            //max_len = max(max_len, i - start);
            
        }
        return max_len;
    }
};

------------
solution three
------------
// 同样的思想用c代码实现，效率提升了一倍
int lengthOfLongestSubstring(char* s) {
    int max_len = 0;
    int start = -1;
    int i = 0;
    int arr[256] = {-1};
    
    memset(arr, -1, sizeof(arr));
    int len = strlen(s);
    
    for(i = 0; i < len; i++)
    {
        int c = s[i];
        if(arr[c] != -1)
        {
            if(start < arr[c])
            {
                start = arr[c];
            }
        }
        
        if(max_len < i - start)
        {
            
            max_len = i - start;
        }
        arr[c] = i;
    }
    return max_len;
}
