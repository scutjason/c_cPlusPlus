1、引用是变量的别名，改变引用的值就等于改变变量的值， 符号为 &
   引用应该是在string、对象、vector、map这些数据结构中才被使用
   
2、定义引用
int a =0;
int &ra = a;  // 定义一个引用re，必须初始化
引用只是个名称，不占存储空间，所以对引用取地址就是对引用的变量本身取地址

3、对引用取地址
&ra 与 &a相等

4、不能再别的变量的引用了，指向了也无效
int b = 1;
ra = b;  // 编译不报错，但是无效，ra仍然指向a

5、引用本身可以被其他引用所指向，不过本质都是同一个变量的别名
int &rra = ra;
rra = 2; // a 等于2

6、引用做位函数参数
大数据块（对象，结构体）作为入参传入函数时，会挤爆栈空间，所以可以传入引用作为传递
引用作为函数形参，说白了，就是函数内部可以直接改动形参的值，而且没有副作用
void swap(int &a, int &b)
{
  int p;
  p = a;
  a = b;
  b = p; // 直接交换了a b的值
}

引用作为形参的好处在于，不需要给形参分配任何的存储空间，直接作为别名改动即可。
而按值传递时，通常需要为形参分配存储单元，拷贝一份实参的数据传给形参。
按指针传递时，也是一样的要为形参分配存储单元（指针变量的空间），而且阅读性很差，容易出错

7、引用作为返回值
不要返回局部对象的引用，包括局部指针，因为对象销毁了，引用就指向了不知道哪的一个地址
最好不要返回局部new分配的一个对象，这个很可能造成内存泄漏string& foo()，容易忘记释放内存
string& foo()
{
  string* str = new string("abc");
  return *str; 
}
string str = foo(); // 那就惨了，new的内存无法释放，当然这样也是不允许的，编译报错 error: conflicting declaration 'std::string str'
// 只能这样
string& tmp = foo();
delete &tmp;


一般如果要用引用作为返回值，那么通常情况下，我们会将这个引用作为形参，或者说返回一个全局变量的引用
int& abc(int a, int b, int c, int& result)
{
     result = a + b + c;
     return result; // result 作为形参
}

如果返回值是const， 那么将不能通过引用来修改变量，const int& abc(int a, int b, int c, int& result)
abc(1,2,4,sum)++; // error  increment of read-only location 'abc(1, 2, 3, (* & sum))'

8、引用和多态
多态：用基类的引用指向子类的对象
class A{}
class B:public A{}
B b;
A &ra = b;
基类的引用ra能够访问子类b中继承了a的那些成员，如果对a中的成员进行vitrual虚化，那么就形成了多态效果
