You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


--------------
answer
--------------
// 比较简单，注意两点
// 1 链表最好有个头head_node,这个头的内容初始化为0，next指向第一个元素
// 2 注意相加的时候保存进位

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
		ListNode head_node = ListNode(0);
        ListNode *ptr = &head_node;
        int flag = 0;
        ListNode *result = new ListNode(0);
        while(l1 != NULL || l2 != NULL || flag)
        {
        	int sum = 0;
            if(l1)
            {
                sum +=l1->val;
            }
            if(l2)
            {
                sum +=l2->val;
            }
   			sum += flag;
            
            flag = sum/10;
            
            ptr->next = new ListNode(sum %10);
            ptr = ptr->next;

            if(l1)
            {
                l1 = l1->next;
            }
            if(l2)
            {
                l2 = l2->next;
            }
            
        }
        return head_node.next;
    }
};
