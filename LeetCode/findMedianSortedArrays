There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

-----------
Example 1:
-----------
nums1 = [1, 3]
nums2 = [2]

The median is 2.0

-----------
Example 2:
-----------
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

-----------
solution 
-----------
// 这个方法的时间复杂度和空间复杂度都是O(log(m+n))
// 思想是先合并排序成一个大的数组，然后取合并数组的中间值 。合并的方式是一个一个比较，N1 < N2，则将N入conbile，N2不动。否则入N2，N1不动，
// 直到N1或者N2有一个已经入完了。
// 48 ms 30% 并不是最优解
double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    
    int conbine[nums1Size + nums2Size];
    int mid = (nums1Size + nums2Size)/2;
    int i = 0;
    int j = 0;
    int k = 0;
    int size1 = nums1Size;
    int size2 = nums2Size;
    
    while(i < size1 &&  j < size2)
    {
        if(nums1[i] <= nums2[j])
        {
            conbine[k] = nums1[i];
            i++;
        }
        else
        {
            conbine[k] = nums2[j];
            j++;
        }
        k++;
    }
    
    while(i < size1)
    {
        conbine[k] = nums1[i];
        printf("conbine %d ", k);
        printf(" is %d\n", nums1[i]);
        k++;
        i++;
    }
    
    while(j < size2)
    {
        conbine[k] = nums2[j];
        k++;
        j++;   
    }
    
    if((nums1Size + nums2Size)%2){
        return conbine[mid];
    }else{
        return (double)(conbine[mid-1] + conbine[mid])/2;
    }
}
